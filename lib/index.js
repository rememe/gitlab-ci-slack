// Generated by CoffeeScript 1.10.0
(function() {
  var app, bodyParser, branchUrl, express, getProjectUrl, getTime, pipelineUrl, port, request, slackUrl;

  express = require('express');

  bodyParser = require('body-parser');

  request = require('request');

  port = process.env['PORT'] || 5000;

  slackUrl = process.env['SLACK_URL'];

  app = express();

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  pipelineUrl = function(body) {
    return "https://gitlab.com/" + body.project.path_with_namespace + "/pipelines/" + body.object_attributes.id;
  };

  branchUrl = function(body) {
    return "https://gitlab.com/" + body.project.path_with_namespace + "/commits/" + body.object_attributes.ref;
  };

  getProjectUrl = function(project) {
    return "https://gitlab.com/" + project + "/environments";
  };

  getTime = function(body) {
    var duration, min, sec;
    duration = body.object_attributes.duration;
    min = Math.floor(duration / 60);
    sec = Math.floor(duration % 60);
    min = ('0' + min).slice(-2);
    sec = ('0' + sec).slice(-2);
    return min + ":" + sec;
  };

  app.post('/webhook/slack/deploy', function(req, res) {
    var project;
    project = (function() {
      switch (req.body.text) {
        case 'payments':
          return 'pingl-app/backend-administration';
        case 'backend':
          return 'pingl-app/backend';
        case 'customer':
          return 'pingl-app/frontend/customer';
        case 'staff':
          return 'pingl-app/frontend/staff';
        case 'admin':
          return 'pingl-app/frontend/admin';
        case 'landing':
          return 'pingl-app/landing-page';
        default:
          return void 0;
      }
    })();
    if (project !== void 0) {
      return res.send({
        text: "Manage project at: <" + (getProjectUrl(project)) + "|" + project + ">"
      });
    } else {
      return res.send({
        text: "Wrong project ID. Please use full form with group as namespace."
      });
    }
  });

  app.post('/', function(req, res) {
    var authorName, authorUsername, body, branch, color, data, environment, footer, pipeline, pretext, project, projectName, projectUrl, status, success, text, title, value;
    body = req.body;
    if (body.object_attributes.status !== "success" && body.object_attributes.status !== "failed" && body.object_attributes.status !== "manual") {
      res.send('ok');
      return;
    }
    pipeline = body.object_attributes.id;
    project = body.project.path_with_namespace;
    projectName = body.project.name;
    projectUrl = body.project.web_url;
    branch = body.object_attributes.ref;
    environment = body.builds[0].status === 'manual' ? body.builds[1].name : body.builds[0].name;
    authorName = "" + body.user.name;
    authorUsername = "" + body.user.username;
    success = body.object_attributes.status === "success" ? true : false;
    status = success ? "passed" : "failed";
    pretext = "<" + projectUrl + "|" + project + ">: New build triggered by " + authorName + " (" + authorUsername + ")";
    text = "Gitlab CI pipeline <" + (pipelineUrl(body)) + "|#" + pipeline + "> of branch <" + (branchUrl(body)) + "|" + branch + "> " + status + ".";
    title = projectName + " - " + environment;
    value = "in " + (getTime(body));
    footer = environment === "staging" ? "Deploy to production manually <" + (getProjectUrl(project)) + "|HERE>" : "";
    color = success ? "#36a64f" : "#ff2e2a";
    data = {
      attachments: [
        {
          color: color,
          pretext: pretext,
          text: text,
          footer: footer,
          fields: [
            {
              title: title,
              value: value
            }
          ]
        }
      ],
      username: "Gitlab CI - " + body.project.name
    };
    request.post({
      url: slackUrl,
      body: data,
      json: true
    });
    return res.send('ok');
  });

  app.listen(port);

}).call(this);
